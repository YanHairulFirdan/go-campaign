// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaign.sql

package sqlc

import (
	"context"
	"time"
)

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO campaigns (title, description, slug, user_id, target_amount, start_date, end_date, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, title, description, slug, user_id, target_amount, current_amount, start_date, end_date, status, created_at, updated_at, deleted_at
`

type CreateCampaignParams struct {
	Title        string    `json:"title"`
	Description  *string   `json:"description"`
	Slug         string    `json:"slug"`
	UserID       int32     `json:"user_id"`
	TargetAmount string    `json:"target_amount"`
	StartDate    time.Time `json:"start_date"`
	EndDate      time.Time `json:"end_date"`
	Status       int32     `json:"status"`
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, createCampaign,
		arg.Title,
		arg.Description,
		arg.Slug,
		arg.UserID,
		arg.TargetAmount,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.UserID,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCampaignBySlug = `-- name: GetCampaignBySlug :one
SELECT id, title, description, slug, user_id, target_amount, current_amount, start_date, end_date, status, created_at, updated_at, deleted_at FROM campaigns
WHERE slug = $1
`

func (q *Queries) GetCampaignBySlug(ctx context.Context, slug string) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, getCampaignBySlug, slug)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.UserID,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPaginatedUserCampaign = `-- name: GetPaginatedUserCampaign :many
SELECT id, title, 
	   CASE 
		   WHEN current_amount = 0 THEN 0 
		   ELSE target_amount / current_amount 
	   END::DECIMAL(10, 2) AS progress, 
	   start_date, end_date, status,
	   CASE
	   	   	WHEN status = 0 THEN 'Draft'
	   	   	WHEN status = 1 THEN 'Active'
	   	   	WHEN status = 2 THEN 'Completed'
	   	   	WHEN status = 3 THEN 'Cancelled'
	   	   ELSE 'Unknown'
	   END AS status_label
FROM campaigns
WHERE 
	user_id = $1 AND
	deleted_at IS NULL AND
	title ILIKE '%' || $4::text || '%' AND
	status = $5::integer
ORDER BY start_date DESC
LIMIT $2 OFFSET $3
`

type GetPaginatedUserCampaignParams struct {
	UserID int32  `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Title  string `json:"title"`
	Status int32  `json:"status"`
}

type GetPaginatedUserCampaignRow struct {
	ID          int32     `json:"id"`
	Title       string    `json:"title"`
	Progress    string    `json:"progress"`
	StartDate   time.Time `json:"start_date"`
	EndDate     time.Time `json:"end_date"`
	Status      int32     `json:"status"`
	StatusLabel string    `json:"status_label"`
}

func (q *Queries) GetPaginatedUserCampaign(ctx context.Context, arg GetPaginatedUserCampaignParams) ([]GetPaginatedUserCampaignRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedUserCampaign,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.Title,
		arg.Status,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedUserCampaignRow
	for rows.Next() {
		var i GetPaginatedUserCampaignRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Progress,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.StatusLabel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalUserCampaigns = `-- name: GetTotalUserCampaigns :one
SELECT COUNT(*) AS total
FROM campaigns
WHERE 
	user_id = $1 AND
	deleted_at IS NULL AND
	title ILIKE '%' || $2::text || '%' AND
	status = $3::integer
`

type GetTotalUserCampaignsParams struct {
	UserID int32  `json:"user_id"`
	Title  string `json:"title"`
	Status int32  `json:"status"`
}

func (q *Queries) GetTotalUserCampaigns(ctx context.Context, arg GetTotalUserCampaignsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalUserCampaigns, arg.UserID, arg.Title, arg.Status)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getUserCampaignById = `-- name: GetUserCampaignById :one
SELECT id, title, description, slug, user_id, target_amount, current_amount, start_date, end_date, status, created_at, updated_at, deleted_at FROM campaigns
WHERE id = $1 AND user_id = $2
`

type GetUserCampaignByIdParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetUserCampaignById(ctx context.Context, arg GetUserCampaignByIdParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, getUserCampaignById, arg.ID, arg.UserID)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.UserID,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteCampaign = `-- name: SoftDeleteCampaign :one
UPDATE campaigns
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
RETURNING id, title, description, slug, user_id, target_amount, current_amount, start_date, end_date, status, created_at, updated_at, deleted_at
`

type SoftDeleteCampaignParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) SoftDeleteCampaign(ctx context.Context, arg SoftDeleteCampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, softDeleteCampaign, arg.ID, arg.UserID)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.UserID,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCampaign = `-- name: UpdateCampaign :one
UPDATE campaigns
SET title = $1, description = $2, slug = $3, target_amount = $4, start_date = $5, end_date = $6, status = $7, updated_at = CURRENT_TIMESTAMP
WHERE id = $8 AND user_id = $9
RETURNING id, title, description, slug, user_id, target_amount, current_amount, start_date, end_date, status, created_at::TIMESTAMP, updated_at::TIMESTAMP
`

type UpdateCampaignParams struct {
	Title        string    `json:"title"`
	Description  *string   `json:"description"`
	Slug         string    `json:"slug"`
	TargetAmount string    `json:"target_amount"`
	StartDate    time.Time `json:"start_date"`
	EndDate      time.Time `json:"end_date"`
	Status       int32     `json:"status"`
	ID           int32     `json:"id"`
	UserID       int32     `json:"user_id"`
}

type UpdateCampaignRow struct {
	ID            int32     `json:"id"`
	Title         string    `json:"title"`
	Description   *string   `json:"description"`
	Slug          string    `json:"slug"`
	UserID        int32     `json:"user_id"`
	TargetAmount  string    `json:"target_amount"`
	CurrentAmount *float32  `json:"current_amount"`
	StartDate     time.Time `json:"start_date"`
	EndDate       time.Time `json:"end_date"`
	Status        int32     `json:"status"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) (UpdateCampaignRow, error) {
	row := q.db.QueryRowContext(ctx, updateCampaign,
		arg.Title,
		arg.Description,
		arg.Slug,
		arg.TargetAmount,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.ID,
		arg.UserID,
	)
	var i UpdateCampaignRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Slug,
		&i.UserID,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
