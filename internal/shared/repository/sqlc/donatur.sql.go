// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: donatur.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createDonatur = `-- name: CreateDonatur :one
INSERT INTO donaturs (name, email, user_id, campaign_id)
VALUES ($1, $2, $3, $4) RETURNING id, user_id, campaign_id, name, email, created_at, updated_at
`

type CreateDonaturParams struct {
	Name       string         `json:"name"`
	Email      sql.NullString `json:"email"`
	UserID     int32          `json:"user_id"`
	CampaignID int32          `json:"campaign_id"`
}

func (q *Queries) CreateDonatur(ctx context.Context, arg CreateDonaturParams) (Donatur, error) {
	row := q.db.QueryRowContext(ctx, createDonatur,
		arg.Name,
		arg.Email,
		arg.UserID,
		arg.CampaignID,
	)
	var i Donatur
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CampaignID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCampaignTotalPaidDonaturs = `-- name: GetCampaignTotalPaidDonaturs :one
SELECT COUNT(*) AS total FROM donaturs
WHERE donaturs.campaign_id IN (
        SELECT id FROM campaigns WHERE slug  = $1 AND deleted_at IS NULL 
    ) AND 
    id IN (
        SELECT id FROM payments WHERE status = 5 AND donatur_id = donaturs.id
    )
`

func (q *Queries) GetCampaignTotalPaidDonaturs(ctx context.Context, slug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCampaignTotalPaidDonaturs, slug)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getPaginatedDonaturs = `-- name: GetPaginatedDonaturs :many
SELECT id, name, email FROM donaturs
WHERE donaturs.campaign_id IN (
        SELECT id FROM campaigns WHERE slug  = $1 AND deleted_at IS NULL 
    ) AND 
    id IN (
        SELECT id FROM payments WHERE status = 5 AND donatur_id = donaturs.id
    )
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetPaginatedDonatursParams struct {
	Slug   string `json:"slug"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetPaginatedDonatursRow struct {
	ID    int32          `json:"id"`
	Name  string         `json:"name"`
	Email sql.NullString `json:"email"`
}

func (q *Queries) GetPaginatedDonaturs(ctx context.Context, arg GetPaginatedDonatursParams) ([]GetPaginatedDonatursRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedDonaturs, arg.Slug, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedDonatursRow
	for rows.Next() {
		var i GetPaginatedDonatursRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
