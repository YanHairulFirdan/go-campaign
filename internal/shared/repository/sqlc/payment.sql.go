// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (transaction_id, donatur_id, donation_id, campaign_id, amount, link, note, status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, transaction_id, donatur_id, donation_id, campaign_id, vendor, method, amount, link, note, status, response, payment_date, created_at, updated_at
`

type CreatePaymentParams struct {
	TransactionID uuid.UUID      `json:"transaction_id"`
	DonaturID     int32          `json:"donatur_id"`
	DonationID    int32          `json:"donation_id"`
	CampaignID    int32          `json:"campaign_id"`
	Amount        string         `json:"amount"`
	Link          sql.NullString `json:"link"`
	Note          sql.NullString `json:"note"`
	Status        int32          `json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.TransactionID,
		arg.DonaturID,
		arg.DonationID,
		arg.CampaignID,
		arg.Amount,
		arg.Link,
		arg.Note,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.DonaturID,
		&i.DonationID,
		&i.CampaignID,
		&i.Vendor,
		&i.Method,
		&i.Amount,
		&i.Link,
		&i.Note,
		&i.Status,
		&i.Response,
		&i.PaymentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentById = `-- name: GetPaymentById :one
SELECT id, transaction_id, donatur_id, donation_id, campaign_id, vendor, method, amount, link, note, status, response, payment_date, created_at, updated_at FROM payments WHERE id = $1
`

func (q *Queries) GetPaymentById(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentById, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.DonaturID,
		&i.DonationID,
		&i.CampaignID,
		&i.Vendor,
		&i.Method,
		&i.Amount,
		&i.Link,
		&i.Note,
		&i.Status,
		&i.Response,
		&i.PaymentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByTransactionId = `-- name: GetPaymentByTransactionId :one
SELECT id, transaction_id, donatur_id, donation_id, campaign_id, vendor, method, amount, link, note, status, response, payment_date, created_at, updated_at FROM payments WHERE transaction_id = $1
`

func (q *Queries) GetPaymentByTransactionId(ctx context.Context, transactionID uuid.UUID) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByTransactionId, transactionID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.DonaturID,
		&i.DonationID,
		&i.CampaignID,
		&i.Vendor,
		&i.Method,
		&i.Amount,
		&i.Link,
		&i.Note,
		&i.Status,
		&i.Response,
		&i.PaymentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentFromCallback = `-- name: UpdatePaymentFromCallback :one
UPDATE payments
SET 
    status = $2, 
    updated_at = CURRENT_TIMESTAMP,
    vendor = $3,
    method = $4,
    response = $5,
    payment_date = $6
WHERE id = $1
RETURNING id, transaction_id, donatur_id, donation_id, campaign_id, vendor, method, amount, link, note, status, response, payment_date, created_at, updated_at
`

type UpdatePaymentFromCallbackParams struct {
	ID          int32                 `json:"id"`
	Status      int32                 `json:"status"`
	Vendor      sql.NullString        `json:"vendor"`
	Method      sql.NullString        `json:"method"`
	Response    pqtype.NullRawMessage `json:"response"`
	PaymentDate sql.NullTime          `json:"payment_date"`
}

func (q *Queries) UpdatePaymentFromCallback(ctx context.Context, arg UpdatePaymentFromCallbackParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentFromCallback,
		arg.ID,
		arg.Status,
		arg.Vendor,
		arg.Method,
		arg.Response,
		arg.PaymentDate,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.DonaturID,
		&i.DonationID,
		&i.CampaignID,
		&i.Vendor,
		&i.Method,
		&i.Amount,
		&i.Link,
		&i.Note,
		&i.Status,
		&i.Response,
		&i.PaymentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
